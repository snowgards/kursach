import logging
from database import db_connect, get_all_order, create_profile, edit_profile, delete_order, get_status_order, edit_status_order

from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import StatesGroup, State


from keyboards import markup, markup_1, markup_2, markup_3, markup_4, markup_5, markup_6, markup_7, markup_8, markup_9, kb_1, admin_start_ikb, upload, get_edit, list_order, ekb_4, ekb_3, ekb_1, ekb_2, cancel, start

API_TOKEN = '5984456758:AAFovlxlzTPjI8ZgbtmSFxABySxBnrElSP0'

logging.basicConfig(level=logging.INFO)

storage = MemoryStorage() #memory for state machine
bot = Bot(token = API_TOKEN, parse_mode='HTML')
dp = Dispatcher(bot, storage = MemoryStorage())

HELP_COMMAND = """
/help - —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥
/start - –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
/menu - —Å–ø–∏—Å–æ–∫ –Ω–∞–ø–∏—Ç–∫–æ–≤
/info - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ"""

class info_order(StatesGroup): #class for state machine 

    user = State()
    corps = State()
    product = State()
    product_order = State()
    verifi = State()
    photo = State()

class edit_order(StatesGroup):
    edit = State()


#function blocks access for other users, this is access for only admin 
def auth(func):
    async def wrapper(message):
        if message ['from']['id'] != 441395036:
            return await message.reply('Sorry, are you not admin', reply = False)
        
        return await func(message)

    return wrapper

#connect database
async def con(_):
    await db_connect()
    print('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ')


#cmd for admin    
@dp.message_handler(commands=['admin'])
@auth
async def adm_message(message: types.Message):
    await bot.send_message(chat_id=message.from_user.id, text = f"–ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.first_name}</b>!\n\n–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É üôà", parse_mode='html', reply_markup = kb_1)

@dp.message_handler(Text(equals='–ó–∞ —Ä–∞–±–æ—Ç—É!'))
async def adm1_message(message: types.Message):
    await bot.send_message(chat_id=message.from_user.id, text = '–ß–µ–º —Ç—ã —Ö–æ—á–µ—à—å –∑–∞–Ω—è—Ç—å—Å—è?', reply_markup = admin_start_ikb())

@dp.callback_query_handler(text='get_all_order')
async def cd_get_all_order(callback: types.callback_query):   
    orders = await get_all_order()
    if not orders:
        return await callback.message.answer('–ó–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç.')

    await show_all_order(callback, orders)
    await callback.answer()

@dp.callback_query_handler(text='complete_work')
async def cd_get_all_order(message: types.Message):
    await bot.send_message(chat_id=message.from_user.id, text = '–•–æ—Ä–æ—à–µ–≥–æ –æ—Ç–¥—ã—Ö–∞!\n\n–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–∞–±–æ—Ç–µ, –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /admin')

#delete order 
@dp.callback_query_handler(list_order.filter(action='delete'))
async def now_delete_order(callback: types.CallbackQuery, callback_data: dict):
    await delete_order(callback_data['id'])
    await callback.message.reply('–ó–∞–∫–∞–∑ –≤—ã–ø–æ–ª–Ω–µ–Ω!\n–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞–∫–∞–∑–∞–º, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã"', reply_markup = admin_start_ikb())
    await callback.answer()


#edit order
@dp.callback_query_handler(list_order.filter(action='edit'))
async def now_edit_order(callback: types.CallbackQuery, callback_data: dict, state: FSMContext):
    await callback.message.answer('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞', reply_markup=ekb_1)
    await edit_order.edit.set()

    async with state.proxy() as data:
        data['verifi'] = callback_data['id']

    await callback.answer()

@dp.message_handler(Text(equals='–ó–∞–∫–∞–∑ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ'), state=edit_order.edit)
async def load_edit(message: types.Message, state: FSMContext) -> None:
    async with state.proxy() as data:
        await edit_status_order(data['verifi'], message.text)
    
    await state.finish()
    await bot.send_message(chat_id=message.from_user.id, text='–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω\n–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞–∫–∞–∑–∞–º, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É.', reply_markup=admin_start_ikb())


#edit_1 order
@dp.callback_query_handler(list_order.filter(action='edit_1'))
async def now_edit_order(callback: types.CallbackQuery, callback_data: dict, state: FSMContext):
    await callback.message.answer('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞', reply_markup=ekb_2)
    await edit_order.edit.set()

    async with state.proxy() as data:
        data['verifi'] = callback_data['id']
        
    await callback.answer()

@dp.message_handler(Text(equals='–ó–∞–∫–∞–∑ –≥–æ—Ç–æ–≤'), state=edit_order.edit)
async def load_edit(message: types.Message, state: FSMContext) -> None:
    async with state.proxy() as data:
        await edit_status_order(data['verifi'], message.text)
    
    await state.finish()
    await bot.send_message(chat_id=message.from_user.id, text='–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω\n–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞–∫–∞–∑–∞–º, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É.', reply_markup=admin_start_ikb())


#edit_2 order
@dp.callback_query_handler(list_order.filter(action='edit_2'))
async def now_edit_order(callback: types.CallbackQuery, callback_data: dict, state: FSMContext):
    await callback.message.answer('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞', reply_markup=ekb_3)
    await edit_order.edit.set()

    async with state.proxy() as data:
        data['verifi'] = callback_data['id']
        
    await callback.answer()

@dp.message_handler(Text(equals='–ù–µ –ø—Ä–æ—à–ª–∞ –æ–ø–ª–∞—Ç–∞'), state=edit_order.edit)
async def load_edit(message: types.Message, state: FSMContext) -> None:
    async with state.proxy() as data:
        await edit_status_order(data['verifi'], message.text)
    
    await state.finish()
    await bot.send_message(chat_id=message.from_user.id, text='–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω\n–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞–∫–∞–∑–∞–º, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É.', reply_markup=admin_start_ikb())


#edit_3 order
@dp.callback_query_handler(list_order.filter(action='edit_3'))
async def now_edit_order(callback: types.CallbackQuery, callback_data: dict, state: FSMContext):
    await callback.message.answer('–ü–æ–¥—Ç–≤–µ—Ä–¥–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞', reply_markup=ekb_4)
    await edit_order.edit.set()

    async with state.proxy() as data:
        data['verifi'] = callback_data['id']
        
    await callback.answer()

@dp.message_handler(Text(equals='–î–∞–Ω–Ω–æ–µ —Ñ–æ—Ç–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–µ–∫–æ–º'), state=edit_order.edit)
async def load_edit(message: types.Message, state: FSMContext) -> None:
    async with state.proxy() as data:
        await edit_status_order(data['verifi'], message.text)
    
    await state.finish()
    await bot.send_message(chat_id=message.from_user.id, text='–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω\n–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∑–∞–∫–∞–∑–∞–º, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É.', reply_markup=admin_start_ikb())


#show all order gui
async def show_all_order(callback: types.CallbackQuery, orders: list):
    for order in orders:
        await bot.send_photo(chat_id=callback.message.chat.id,
                            photo=order[6],
                            caption=f'ID: <b>{order[0]}</b>\n–ò–°–£: <b>{order[1]}</b>\n–ö–æ—Ä–ø—É—Å: <b>{order[2]}</b>\n–ó–∞–∫–∞–∑: <b>{order[4]}</b>\n–°—Ç–∞—Ç—É—Å: <b>{order[5]}</b>',
                            parse_mode='HTML', 
                            reply_markup=get_edit(order[0]))

@dp.callback_query_handler(text='complete_work')
async def cd_complete_work(message: types.Message):
    await bot.send_message(chat_id=message.from_user.id, text = '–•–æ—Ä–æ—à–∞—è —Ä–∞–±–æ—Ç–∞!', reply_markup = kb_1)


#cmd for users 
@dp.message_handler(commands=['help'])
async def help_message(message: types.Message):
    await bot.send_message(chat_id=message.from_user.id, text = HELP_COMMAND, reply_markup=start)
    await message.delete()

@dp.message_handler(commands=['info'])
async def info_message(message: types.Message):
    await bot.send_message(chat_id=message.from_user.id, text = '–ö–∞–∫–æ–π-—Ç–æ —Ç–µ–∫—Å—Ç –æ –±–æ—Ç–µ', reply_markup=start)

@dp.message_handler(commands=['menu'])
async def menu_message(message: types.Message):
    await bot.send_photo(chat_id=message.from_user.id, photo = 'https://sun9-26.vkuserphoto.ru/impg/5UkFkOxfaj2PONYW0KIjAvy4dNQawFZBKFHexw/G2qz-qXsgyo.jpg?size=1584x2160&quality=95&sign=a408d02b13b53dec28cc6f6387f4f875&type=album', caption='–í—ã–±–∏—Ä–∞–π –Ω–∞–ø–∏—Ç–æ–∫ –∏ –Ω–µ –≤—ã–±–∏—Ä–∞–π –≤–æ–æ–±—â–µ!', reply_markup=start)

@dp.message_handler(commands=['start'])
async def start_message(message: types.Message):
    await bot.send_message(chat_id=message.from_user.id, 
                            text = f"–ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.first_name}</b>!\n\n–Ø ‚Äî –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –∑–∞–∫–∞–∑–∞—Ç—å –Ω–∞–ø–∏—Ç–æ–∫ –≤ –æ–¥–Ω–æ–º –∏–∑ –∫–æ—Ä–ø—É—Å–æ–≤ –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞ –ò–¢–ú–û.\n\n–ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É üôà",
                            parse_mode='html', reply_markup=markup)
    await create_profile(user_id=message.from_user.id)


@dp.message_handler(Text(equals='–°—Ç–∞—Ä—Ç'))
async def start_message(message: types.Message):
    await bot.send_message(chat_id=message.from_user.id, 
                            text = f"–ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.first_name}</b>!\n\n–Ø ‚Äî –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –∑–∞–∫–∞–∑–∞—Ç—å –Ω–∞–ø–∏—Ç–æ–∫ –≤ –æ–¥–Ω–æ–º –∏–∑ –∫–æ—Ä–ø—É—Å–æ–≤ –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞ –ò–¢–ú–û.\n\n–ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É üôà",
                            parse_mode='html', reply_markup=markup)
    await create_profile(user_id=message.from_user.id)

#show status for user
async def show_status(callback: types.CallbackQuery, orders: list):
        await bot.send_message(chat_id=callback.message.chat.id,
                                text=f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ\n\n–í–∞—à ID: <b>{orders[0]}</b>\n–ö–æ—Ä–ø—É—Å: <b>{orders[1]}</b>\n–í–∞—à –∑–∞–∫–∞–∑: <b>{orders[2]}</b>\n–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: <b>{orders[3]}</b>',
                                parse_mode='HTML', reply_markup = upload())


#return to start
@dp.message_handler(Text(equals='–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ'), state='*')
async def return_message(message: types.Message, state: FSMContext):
    await bot.send_message(chat_id=message.from_user.id, 
                            text = f"–ü—Ä–∏–≤–µ—Ç, <b>{message.from_user.first_name}</b>!\n\n–Ø ‚Äî –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –∑–∞–∫–∞–∑–∞—Ç—å –Ω–∞–ø–∏—Ç–æ–∫ –≤ –æ–¥–Ω–æ–º –∏–∑ –∫–æ—Ä–ø—É—Å–æ–≤ –£–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞ –ò–¢–ú–û.\n\n–ß—Ç–æ–±—ã —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É üôà",
                            parse_mode='html', reply_markup=markup)
    if state is None:
        return
    
    await state.finish()
    await message.delete()

@dp.message_handler(Text(equals='–û—Ç–º–µ–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞'), state='*')
async def return_message(message: types.Message, state: FSMContext):
    await bot.send_message(chat_id=message.from_user.id, 
                            text = f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω",
                            parse_mode='html', reply_markup=admin_start_ikb())
    if state is None:
        return
    
    await state.finish()
    await message.delete()


@dp.message_handler(Text(equals='–ó–∞–∫–∞–∑–∞—Ç—å –Ω–∞–ø–∏—Ç–æ–∫'))
async def start_order(message: types.Message):
    await bot.send_message(chat_id=message.from_user.id,
                            text = '–î–ª—è –Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏ —Å–≤–æ–π –Ω–æ–º–µ—Ä –ò–°–£ üôÉ', reply_markup=cancel)
    await info_order.user.set()

@dp.message_handler(lambda message: not message.text.isdigit() or int(message.text) > 355000, state=info_order.user)
async def check_isu(message: types.Message):
    await message.reply('–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ –Ω–æ–º–µ—Ä –ò–°–£!')


@dp.message_handler(content_types=['text'], state=info_order.user)
async def next_message(message: types.Message, state: FSMContext):
    await bot.send_message(chat_id=message.from_user.id, text = '–í—ã–±–µ—Ä–∏ –∫–æ—Ä–ø—É—Å:', reply_markup = markup_1) 
    async with state.proxy() as data:
        data['user'] = message.text
    await info_order.next()


#corps
@dp.message_handler(Text(equals='—É–ª. –õ–æ–º–æ–Ω–æ—Å–æ–≤–∞ 9–ú'), state=info_order.corps)
async def choice_message(message: types.Message, state: FSMContext):
    await bot.send_message(chat_id=message.from_user.id, text = '–í—ã–±–µ—Ä–∏ –Ω–∞–ø–∏—Ç–æ–∫:', reply_markup = markup_2)
    async with state.proxy() as data:
        data['corps'] = message.text
    await info_order.next()
    
@dp.message_handler(Text(equals='–ø—Ä-–∫—Ç –ö—Ä–æ–Ω–≤–µ—Ä–∫—Å–∫–∏–π 49'), state=info_order.corps)
async def choice_message(message: types.Message, state: FSMContext):
    await bot.send_message(chat_id=message.from_user.id, text = '–í—ã–±–µ—Ä–∏ –Ω–∞–ø–∏—Ç–æ–∫:', reply_markup = markup_2)
    async with state.proxy() as data:
        data['corps'] = message.text
    await info_order.next()

@dp.message_handler(Text(equals='—É–ª. –ß–∞–π–∫–æ–≤—Å–∫–æ–≥–æ 11/2'), state=info_order.corps)
async def choice_message(message: types.Message, state: FSMContext):
    await bot.send_message(chat_id=message.from_user.id, text = '–í—ã–±–µ—Ä–∏ –Ω–∞–ø–∏—Ç–æ–∫:', reply_markup = markup_2)
    async with state.proxy() as data:
        data['corps'] = message.text
    await info_order.next()


#drinks
@dp.message_handler(Text(equals='–õ–∞—Ç—Ç–µ'), state=info_order.product)
async def drink_message(message: types.Message, state: FSMContext):
    await bot.send_message(chat_id=message.from_user.id, text = '–í—ã–±–µ—Ä–∏ –æ–±—ä–µ–º:', reply_markup = markup_3)
    async with state.proxy() as data:
        data['product'] = message.text
    await info_order.next() 
    

@dp.message_handler(Text(equals='–†–∞—Ñ'), state=info_order.product)
async def drink_message(message: types.Message, state: FSMContext):
    await bot.send_message(chat_id=message.from_user.id, text = '–í—ã–±–µ—Ä–∏ –æ–±—ä–µ–º:', reply_markup = markup_4)
    async with state.proxy() as data:
        data['product'] = message.text
    await info_order.next() 

@dp.message_handler(Text(equals='–ö–∞–ø—É—á–∏–Ω–æ'), state=info_order.product)
async def drink_message(message: types.Message, state: FSMContext):
    await bot.send_message(chat_id=message.from_user.id, text = '–í—ã–±–µ—Ä–∏ –æ–±—ä–µ–º:', reply_markup = markup_5)
    async with state.proxy() as data:
        data['product'] = message.text
    await info_order.next() 

@dp.message_handler(Text(equals='–ö–∞–∫–∞–æ'), state=info_order.product)
async def drink_message(message: types.Message, state: FSMContext):
    await bot.send_message(chat_id=message.from_user.id, text = '–í—ã–±–µ—Ä–∏ –æ–±—ä–µ–º:', reply_markup = markup_6)
    async with state.proxy() as data:
        data['product'] = message.text
    await info_order.next() 

@dp.message_handler(Text(equals='–ì–æ—Ä—è—á–∏–π —à–æ–∫–æ–ª–∞–¥'), state=info_order.product)
async def drink_message(message: types.Message, state: FSMContext):
    await bot.send_message(chat_id=message.from_user.id, text = '–í—ã–±–µ—Ä–∏ –æ–±—ä–µ–º:', reply_markup = markup_7)
    async with state.proxy() as data:
        data['product'] = message.text
    await info_order.next() 

@dp.message_handler(Text(equals='–ê–º–µ—Ä–∏–∫–∞–Ω–æ'), state=info_order.product)
async def drink_message(message: types.Message, state: FSMContext):
    await bot.send_message(chat_id=message.from_user.id, text = '–í—ã–±–µ—Ä–∏ –æ–±—ä–µ–º:', reply_markup = markup_8)
    async with state.proxy() as data:
        data['product'] = message.text
    await info_order.next() 


#latte
@dp.message_handler(Text(equals='–õ–∞—Ç—Ç–µ 250 –º–ª'), state=info_order.product_order)
async def bye_message(message: types.Message, state: FSMContext):
    await bot.send_message(chat_id=message.from_user.id, text = '–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞ —Å–æ—Å—Ç–∞–≤–∏–ª–∞ <b>140 —Ä—É–±–ª–µ–π</b>\n\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—Ç–∞", —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞.', reply_markup = markup_9)
    async with state.proxy() as data:
        data['product_order'] = message.text
    await info_order.next()

@dp.message_handler(Text(equals='–õ–∞—Ç—Ç–µ 380 –º–ª'), state=info_order.product_order)
async def bye_message(message: types.Message, state: FSMContext):
    await bot.send_message(chat_id=message.from_user.id, text = '–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞ —Å–æ—Å—Ç–∞–≤–∏–ª–∞ <b>200 —Ä—É–±–ª–µ–π</b>\n\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—Ç–∞", —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞.', reply_markup = markup_9)
    async with state.proxy() as data:
        data['product_order'] = message.text
    await info_order.next()

@dp.message_handler(Text(equals='–õ–∞—Ç—Ç–µ 510 –º–ª'), state=info_order.product_order)
async def bye_message(message: types.Message, state: FSMContext):
    await bot.send_message(chat_id=message.from_user.id, text = '–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞ —Å–æ—Å—Ç–∞–≤–∏–ª–∞ <b>245 —Ä—É–±–ª–µ–π</b>\n\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—Ç–∞", —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞.', reply_markup = markup_9)
    async with state.proxy() as data:
        data['product_order'] = message.text
    await info_order.next()


#raf
@dp.message_handler(Text(equals='–†–∞—Ñ 250 –º–ª'), state=info_order.product_order)
async def bye_message(message: types.Message, state: FSMContext):
    await bot.send_message(chat_id=message.from_user.id, text = '–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞ —Å–æ—Å—Ç–∞–≤–∏–ª–∞ <b>140 —Ä—É–±–ª–µ–π</b>\n\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—Ç–∞", —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞.', reply_markup = markup_9)
    async with state.proxy() as data:
        data['product_order'] = message.text
    await info_order.next()

@dp.message_handler(Text(equals='–†–∞—Ñ 380 –º–ª'), state=info_order.product_order)
async def bye_message(message: types.Message, state: FSMContext):
    await bot.send_message(chat_id=message.from_user.id, text = '–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞ —Å–æ—Å—Ç–∞–≤–∏–ª–∞ <b>245 —Ä—É–±–ª–µ–π</b>\n\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—Ç–∞", —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞.', reply_markup = markup_9)
    async with state.proxy() as data:
        data['product_order'] = message.text
    await info_order.next()

@dp.message_handler(Text(equals='–†–∞—Ñ 510 –º–ª'), state=info_order.product_order)
async def bye_message(message: types.Message, state: FSMContext):
    await bot.send_message(chat_id=message.from_user.id, text = '–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞ —Å–æ—Å—Ç–∞–≤–∏–ª–∞ <b>275 —Ä—É–±–ª–µ–π</b>\n\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—Ç–∞", —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞.', reply_markup = markup_9)
    async with state.proxy() as data:
        data['product_order'] = message.text
    await info_order.next()

#capuchino
@dp.message_handler(Text(equals='–ö–∞–ø—É—á–∏–Ω–æ 250 –º–ª'), state=info_order.product_order)
async def bye_message(message: types.Message, state: FSMContext):
    await bot.send_message(chat_id=message.from_user.id, text = '–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞ —Å–æ—Å—Ç–∞–≤–∏–ª–∞ <b>140 —Ä—É–±–ª–µ–π</b>\n\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—Ç–∞", —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞.', reply_markup = markup_9)
    async with state.proxy() as data:
        data['product_order'] = message.text
    await info_order.next()

@dp.message_handler(Text(equals='–ö–∞–ø—É—á–∏–Ω–æ 380 –º–ª'), state=info_order.product_order)
async def bye_message(message: types.Message, state: FSMContext):
    await bot.send_message(chat_id=message.from_user.id, text = '–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞ —Å–æ—Å—Ç–∞–≤–∏–ª–∞ <b>200 —Ä—É–±–ª–µ–π</b>\n\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—Ç–∞", —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞.', reply_markup = markup_9)
    async with state.proxy() as data:
        data['product_order'] = message.text
    await info_order.next()

@dp.message_handler(Text(equals='–ö–∞–ø—É—á–∏–Ω–æ 510 –º–ª'), state=info_order.product_order)
async def bye_message(message: types.Message, state: FSMContext):
    await bot.send_message(chat_id=message.from_user.id, text = '–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞ —Å–æ—Å—Ç–∞–≤–∏–ª–∞ <b>245 —Ä—É–±–ª–µ–π</b>\n\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—Ç–∞", —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞.', reply_markup = markup_9)
    async with state.proxy() as data:
        data['product_order'] = message.text
    await info_order.next()


#cocoa
@dp.message_handler(Text(equals='–ö–∞–∫–∞–æ 250 –º–ª'), state=info_order.product_order)
async def bye_message(message: types.Message, state: FSMContext):
    await bot.send_message(chat_id=message.from_user.id, text = '–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞ —Å–æ—Å—Ç–∞–≤–∏–ª–∞ <b>175 —Ä—É–±–ª–µ–π</b>\n\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—Ç–∞", —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞.', reply_markup = markup_9)
    async with state.proxy() as data:
        data['product_order'] = message.text
    await info_order.next()

@dp.message_handler(Text(equals='–ö–∞–∫–∞–æ 380 –º–ª'), state=info_order.product_order)
async def bye_message(message: types.Message, state: FSMContext):
    await bot.send_message(chat_id=message.from_user.id, text = '–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞ —Å–æ—Å—Ç–∞–≤–∏–ª–∞ <b>245 —Ä—É–±–ª–µ–π</b>\n\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—Ç–∞", —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞.', reply_markup = markup_9)
    async with state.proxy() as data:
        data['product_order'] = message.text
    await info_order.next()

@dp.message_handler(Text(equals='–ö–∞–∫–∞–æ 510 –º–ª'), state=info_order.product_order)
async def bye_message(message: types.Message, state: FSMContext):
    await bot.send_message(chat_id=message.from_user.id, text = '–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞ —Å–æ—Å—Ç–∞–≤–∏–ª–∞ <b>275 —Ä—É–±–ª–µ–π</b>\n\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—Ç–∞", —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞.', reply_markup = markup_9)
    async with state.proxy() as data:
        data['product_order'] = message.text
    await info_order.next()


#hot chocolate
@dp.message_handler(Text(equals='–ì–æ—Ä—è—á–∏–π —à–æ–∫–æ–ª–∞–¥ 250 –º–ª'), state=info_order.product_order)
async def bye_message(message: types.Message, state: FSMContext):
    await bot.send_message(chat_id=message.from_user.id, text = '–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞ —Å–æ—Å—Ç–∞–≤–∏–ª–∞ <b>210 —Ä—É–±–ª–µ–π</b>\n\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—Ç–∞", —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞.', reply_markup = markup_9)
    async with state.proxy() as data:
        data['product_order'] = message.text
    await info_order.next()

@dp.message_handler(Text(equals='–ì–æ—Ä—è—á–∏–π —à–æ–∫–æ–ª–∞–¥ 380 –º–ª'), state=info_order.product_order)
async def bye_message(message: types.Message, state: FSMContext):
    await bot.send_message(chat_id=message.from_user.id, text = '–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞ —Å–æ—Å—Ç–∞–≤–∏–ª–∞ <b>280 —Ä—É–±–ª–µ–π</b>\n\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—Ç–∞", —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞.', reply_markup = markup_9)
    async with state.proxy() as data:
        data['product_order'] = message.text
    await info_order.next()

@dp.message_handler(Text(equals='–ì–æ—Ä—è—á–∏–π —à–æ–∫–æ–ª–∞–¥ 510 –º–ª'), state=info_order.product_order)
async def bye_message(message: types.Message, state: FSMContext):
    await bot.send_message(chat_id=message.from_user.id, text = '–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞ —Å–æ—Å—Ç–∞–≤–∏–ª–∞ <b>310 —Ä—É–±–ª–µ–π</b>\n\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—Ç–∞", —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞.', reply_markup = markup_9)
    async with state.proxy() as data:
        data['product_order'] = message.text
    await info_order.next()


#americano
@dp.message_handler(Text(equals='–ê–º–µ—Ä–∏–∫–∞–Ω–æ 250 –º–ª'), state=info_order.product_order)
async def bye_message(message: types.Message, state: FSMContext):
    await bot.send_message(chat_id=message.from_user.id, text = '–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞ —Å–æ—Å—Ç–∞–≤–∏–ª–∞ <b>120 —Ä—É–±–ª–µ–π</b>\n\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—Ç–∞", —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞.', reply_markup = markup_9)
    async with state.proxy() as data:
        data['product_order'] = message.text
    await info_order.next()

@dp.message_handler(Text(equals='–ê–º–µ—Ä–∏–∫–∞–Ω–æ 380 –º–ª'), state=info_order.product_order)
async def bye_message(message: types.Message, state: FSMContext):
    await bot.send_message(chat_id=message.from_user.id, text = '–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞ —Å–æ—Å—Ç–∞–≤–∏–ª–∞ <b>170 —Ä—É–±–ª–µ–π</b>\n\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—Ç–∞", —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞.', reply_markup = markup_9)
    async with state.proxy() as data:
        data['product_order'] = message.text
    await info_order.next()

@dp.message_handler(Text(equals='–ê–º–µ—Ä–∏–∫–∞–Ω–æ 510 –º–ª'), state=info_order.product_order)
async def bye_message(message: types.Message, state: FSMContext):
    await bot.send_message(chat_id=message.from_user.id, text = '–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞ —Å–æ—Å—Ç–∞–≤–∏–ª–∞ <b>205 —Ä—É–±–ª–µ–π</b>\n\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—Ç–∞", —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞.', reply_markup = markup_9)
    async with state.proxy() as data:
        data['product_order'] = message.text
    await info_order.next()


#pay
@dp.message_handler(Text(equals='–û–ø–ª–∞—Ç–∞'), state=info_order.verifi)
async def pay_message(message: types.Message, state: FSMContext):
    await bot.send_message(chat_id=message.from_user.id, text = '–î–ª—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–≤–µ–¥–∏ —Å—É–º–º—É –∑–∞–∫–∞–∑–∞ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞: +7-921-314-90-45\n\n–ü—Ä–∏—à–ª–∏ —á–µ–∫ –æ–± –æ–ø–ª–∞—Ç–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>JPEG</b> –∏–ª–∏ <b>PNG</b>.')
    async with state.proxy() as data:
        data['verifi'] = message.text
    await info_order.next()

@dp.message_handler(lambda message: not message.photo, state=info_order.photo)
async def check_photo(message: types.Message):
    await message.reply('–≠—Ç–æ –Ω–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è!')

@dp.message_handler(content_types=['photo'], state=info_order.photo)
async def check(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['photo'] = message.photo[0].file_id
        print(data)

    await edit_profile(state, user_id=message.from_user.id)
    await bot.send_message(chat_id=message.from_user.id, text='–¢–≤–æ–π –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç.\n–ß—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.', reply_markup = upload())
    await state.finish()

@dp.callback_query_handler(text='update_info')
async def cd_get_status_order(callback: types.callback_query):   
    order = await get_status_order(callback.message)
    if not order:
        return await callback.message.answer('–¢—ã —É–∂–µ –∑–∞–±—Ä–∞–ª —Å–≤–æ–π –Ω–∞–ø–∏—Ç–æ–∫.\n–ß—Ç–æ–±—ã –∑–∞–∫–∞–∑–∞—Ç—å –Ω–æ–≤—ã–π, –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /start –∏–ª–∏ –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.', reply_markup = start)
    await show_status(callback, order)
    await callback.answer()

if __name__ == '__main__':
    executor.start_polling (dp, skip_updates = True,
                            on_startup = con)
